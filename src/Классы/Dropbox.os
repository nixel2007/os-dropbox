#Использовать restler
#Использовать json

#Область ОписаниеПеременных

Перем КлючАвторизации;
Перем СекретныйКлюч;
Перем ТокенАвторизации;

Перем ПарсерJSON;
Перем ВерсияAPI;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ПриСозданииОбъекта(пКлючАвторизации = "", пСекретныйКлюч = "", пТокенАвторизации = "")
	
	УстановитьПараметрыАвторизации(пКлючАвторизации, пСекретныйКлюч);
	УстановитьТокенАвторизации(пТокенАвторизации);
	
КонецПроцедуры // ПриСозданииОбъекта()

Процедура УстановитьПараметрыАвторизации(пКлючАвторизации, пСекретныйКлюч) Экспорт
	КлючАвторизации = пКлючАвторизации;
	СекретныйКлюч = пСекретныйКлюч;
КонецПроцедуры // УстановитьПараметрыАвторизации()

Процедура УстановитьТокенАвторизации(пТокенАвторизации) Экспорт
	ТокенАвторизации = пТокенАвторизации;
КонецПроцедуры // УстановитьТокенАвторизации()

Функция ПолучитьТокенАвторизации() Экспорт
	
	// TODO: В разрабоке, нужно допилить получение токена

	Результат = Ложь;

	Соединение = Новый HTTPСоединение("https://api.dropboxapi.com", 443);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization", "Basic " + ПолучитьХэшАвторизации());
	Заголовки.Вставить("Content-Type", "application/json");

	Клиент = Новый КлиентВебAPI();
	Клиент.ИспользоватьСоединение(Соединение);
	Клиент.УстановитьЗаголовки(Заголовки);
	Клиент.УстановитьТипКонтентаТелаЗапроса(ТипКонтентаТелаЗапроса.JSON);	
	Клиент.ДобавитьПараметр("oauth1_token", КлючАвторизации);
	Клиент.ДобавитьПараметр("oauth1_token_secret", СекретныйКлюч);
	
	ОтветСервиса = Клиент.Отправить(ВерсияAPI + "/auth/token/from_oauth1");

	// Получитьм токен

	Возврат Результат;
	
КонецФункции // ПолучитьТокенАвторизации()

Функция ОтправитьФайл(ЛокальныйПутьКФайлу, ПутьНаСервисе, Режим = "add", Перемеименовывать = Ложь, 
	НеуведомлятьПользователей = Ложь, КонтролироватьСтруктуру = Ложь) Экспорт
	
	ЛокальныйФайл = Новый Файл(ЛокальныйПутьКФайлу);
	Если Не ЛокальныйФайл.Существует() Тогда
		ВызватьИсключение ("Локальный файл не существует");
	КонецЕсли;
	
	РазмерФайла  = ЛокальныйФайл.Размер();
	Если РазмерФайла <= ПолучитьОграничениеРазмераФайла() Тогда
		Возврат ОтправитьФайлБезСессии(ЛокальныйПутьКФайлу, ПутьНаСервисе, Режим, Перемеименовывать,
		НеуведомлятьПользователей, КонтролироватьСтруктуру);
	КонецЕсли;
	
	ИдентификаторФайла = Неопределено;
	
	ИдентификаторСессии = ОткрытьСессиюОтправкиФайла(ЛокальныйПутьКФайлу);
	Если ИдентификаторСессии <> Неопределено Тогда
		
		Если ОтправитьФайлЧерезСессию(ИдентификаторСессии, ЛокальныйПутьКФайлу, 0) Тогда
			
			ПараметрыДействия = Новый Структура();
			ПараметрыДействия.Вставить("path", ПутьНаСервисе);
			ПараметрыДействия.Вставить("mode", Режим);
			ПараметрыДействия.Вставить("autorename", Перемеименовывать);
			ПараметрыДействия.Вставить("mute", НеуведомлятьПользователей);
			ПараметрыДействия.Вставить("strict_conflict", КонтролироватьСтруктуру);
			
			ИдентификаторФайла = ЗакрытьСесииюОтправкиФайла(ИдентификаторСессии, ЛокальныйПутьКФайлу, ПараметрыДействия, РазмерФайла);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторФайла; 
	
КонецФункции // ОтправитьФайл()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОткрытьСессиюОтправкиФайла(ЛокальныйПутьКФайлу) Экспорт
	
	Перем ИдентификаторСессии;
	
	Соединение = Новый HTTPСоединение("https://content.dropboxapi.com", 443);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization", "Bearer " + ТокенАвторизации);
	Заголовки.Вставить("Content-Type", "application/octet-stream");
	Заголовки.Вставить("Dropbox-API-Arg", ПолучитьФорматированнуюСтрокуJSON(Новый Структура()));
	
	Запрос = Новый HTTPЗапрос("2/files/upload_session/start", Заголовки);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Если Ответ.КодСостояния = 200 Тогда
		
		ДанныеОтвета = ПарсерJSON.ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку()); 	
		ИдентификаторСессии = ДанныеОтвета.Получить("session_id");
		
	Иначе
		
		// TODO: Обработка ошибок
		
	КонецЕсли;
	
	Возврат ИдентификаторСессии;
	
КонецФункции // ОткрытьСессиюОтправкиФайла()

Функция ОтправитьФайлЧерезСессию(ИдентификаторСессии, ЛокальныйПутьКФайлу, Размер, ПовторнаяПопытка = Ложь) Экспорт
	
	Результат = Ложь;
	
	ПараметрыСессии = Новый Структура("cursor", Новый Структура("session_id, offset", ИдентификаторСессии, Размер));
	ПараметрыDropbox = ПолучитьФорматированнуюСтрокуJSON(ПараметрыСессии);
	
	Соединение = Новый HTTPСоединение("https://content.dropboxapi.com", 443);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization", "Bearer " + ТокенАвторизации);
	Заголовки.Вставить("Content-Type", "application/octet-stream");
	Заголовки.Вставить("Dropbox-API-Arg", ПараметрыDropbox); 
	
	Запрос = Новый HTTPЗапрос(ВерсияAPI + "/files/upload_session/append_v2", Заголовки);
	Запрос.УстановитьИмяФайлаТела(ЛокальныйПутьКФайлу);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);	
	Если Ответ.КодСостояния = 200 Тогда
		
		Результат = Истина;
		
	Иначе
		
		// если не правильное смещение - пробуем еще раз
		УточненныйРазмер = Размер;
		Результат = ОтправитьФайлЧерезСессию(ИдентификаторСессии, ЛокальныйПутьКФайлу, УточненныйРазмер, Истина);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОтправитьФайлЧерезСессию()

Функция ЗакрытьСесииюОтправкиФайла(ИдентификаторСессии, ЛокальныйПутьКФайлу, 
	ПараметрыДействия, Размер, ПовторнаяПопытка = Ложь) Экспорт
	
	Перем ИдентификаторФайла;
	
	Соединение = Новый HTTPСоединение("https://content.dropboxapi.com", 443);
	Параметры = Новый Структура("cursor, commit", 
		Новый Структура("session_id, offset", ИдентификаторСессии, Размер), ПараметрыДействия);
	
	ПараметрыDropbox = ПолучитьФорматированнуюСтрокуJSON(Параметры);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization", "Bearer " + ТокенАвторизации);
	Заголовки.Вставить("Content-Type", "application/octet-stream");
	Заголовки.Вставить("Dropbox-API-Arg", ПараметрыDropbox);
	
	Запрос = Новый HTTPЗапрос(ВерсияAPI + "/files/upload_session/finish", Заголовки);
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Если Ответ.КодСостояния = 200 Тогда
		
		ДанныеОтвета = ПарсерJSON.ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());
		ИдентификаторФайла = ДанныеОтвета.Получить("id");
		
	Иначе
		
		Если Не ПовторнаяПопытка И Ответ.КодСостояния = 409 Тогда
			
			ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
			УточненныйРазмер = ПолучитьУточнениеРазмераИзОтвета(ТелоОтвета);
	
			Если УточненныйРазмер <> Неопределено Тогда

				Возврат ЗакрытьСесииюОтправкиФайла(ИдентификаторСессии, ЛокальныйПутьКФайлу, ПараметрыДействия, 
					УточненныйРазмер, Истина);

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИдентификаторФайла;
	
КонецФункции // ЗакрытьСесииюОтправкиФайла()

Функция ОтправитьФайлБезСессии(ЛокальныйПутьКФайлу, ПутьНаСервисе, Режим = "add", Перемеименовывать = Ложь, 
	НеуведомлятьПользователей = Ложь, КонтролироватьСтруктуру = Ложь) Экспорт
	
	Перем ИдентификаторФайла;
	
	
	ЛокальныйФайл = Новый Файл(ЛокальныйПутьКФайлу);
	Если Не ЛокальныйФайл.Существует() Тогда
		ВызватьИсключение ("Локальный файл не существует");
	КонецЕсли;
	
	ПараметрыОтправкиФайла = ПолучитьПараметрыОтправкиФайла(
	ПутьНаСервисе, 
	Режим, 
	Перемеименовывать, 
	НеуведомлятьПользователей, 
	КонтролироватьСтруктуру);	
	ПараметрыDropbox = ПолучитьФорматированнуюСтрокуJSON(ПараметрыОтправкиФайла);
	
	Соединение = Новый HTTPСоединение("https://content.dropboxapi.com");	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization", "Bearer " + ТокенАвторизации);
	Заголовки.Вставить("Content-Type", "application/octet-stream");
	Заголовки.Вставить("Dropbox-API-Arg", ПараметрыDropbox);
	
	Запрос = Новый HTTPЗапрос(ВерсияAPI + "/files/upload", Заголовки);
	Запрос.УстановитьИмяФайлаТела(ЛокальныйПутьКФайлу);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Если Ответ.КодСостояния = 200 Тогда
		
		ДанныеОтвета = ПарсерJSON.ПрочитатьJSON(Ответ.ПолучитьТелоКакСтроку());
		ИдентификаторФайла = ДанныеОтвета.Получить("id");
		
	Иначе
		
		// TODO: обработка ошибок dropbox
		
	КонецЕсли;
	
	Возврат ИдентификаторФайла;
	
КонецФункции // ОтправитьФайлБезСессии()

Функция ПолучитьФорматированнуюСтрокуJSON(Данные) Экспорт
	
	Возврат ПарсерJSON.ЗаписатьJSON(Данные, Ложь,, Истина, Истина);
	
КонецФункции // ПолучитьФорматированнуюСтрокуJSON()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьХэшАвторизации()
	
	Возврат КодироватьСтрокуВBase64(КлючАвторизации + ":" + СекретныйКлюч);
	
КонецФункции // ПолучитьХэшАвторизации()

Функция КодироватьСтрокуВBase64(ИсходнаяСтрока, Знач КодировкаФайла = Неопределено) 
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	Если КодировкаФайла = Неопределено Тогда
		КодировкаФайла = КодировкаТекста.ANSI;
	КонецЕсли;
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаФайла);
	ЗаписьТекста.Записать(ИсходнаяСтрока);
	ЗаписьТекста.Закрыть();
	Результат = Base64Строка(Новый ДвоичныеДанные(ИмяФайла));
	
	Попытка 
		УдалитьФайлы(ИмяФайла) 
	Исключение 
		Сообщить("Не удалось удалить временный файл, по причине: " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // КодироватьСтрокуВBase64()

Функция ПолучитьОграничениеРазмераФайла()
	
	Возврат 150 * 1024 * 1024 * 8; // 150 мБайт
	
КонецФункции // ПолучитьОграничениеРазмераФайла()

Функция ПолучитьПараметрыОтправкиФайла(ПутьНаСервисе, Режим = "add", Перемеименовывать = Истина, 
	НеуведомлятьПользователей = Ложь, КонтролироватьСтруктуру = Ложь)
	
	Параметры = Новый Структура();
	Параметры.Вставить("path", ПутьНаСервисе);
	Параметры.Вставить("mode", Режим);
	Параметры.Вставить("autorename", Перемеименовывать);
	Параметры.Вставить("mute", НеуведомлятьПользователей);
	Параметры.Вставить("strict_conflict", КонтролироватьСтруктуру);
	
	Возврат Параметры;
	
КонецФункции // ПолучитьПараметрыОтправкиФайла()

Функция ПолучитьУточнениеРазмераИзОтвета(Тело)
	
	Перем Результат;
	
	ДанныеОтвета = ПарсерJSON.ПрочитатьJSON(Тело);
	Если СтрНайти(ДанныеОтвета.Получить("error_summary"), "incorrect_offset") > 0 Тогда		
		Ошибка = ДанныеОтвета.Получить("error");
		Если Ошибка <> Неопределено Тогда		
			Результат = Ошибка.Получить("correct_offset");	
			Если Результат = Неопределено Тогда
				ТегПоиска = Ошибка.Получить(".tag");		
				Если ТегПоиска <> Неопределено Тогда
					Уровень2 = Ошибка.Получить(ТегПоиска);
					Если Уровень2 <> Неопределено Тогда
						Результат = Уровень2.Получить("correct_offset");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьУточнениеРазмераИзОтвета()

#КонецОбласти

КлючАвторизации = "";
СекретныйКлюч = "";
ВерсияAPI = "2";
ПарсерJSON = Новый ПарсерJSON();
