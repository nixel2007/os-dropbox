#Использовать "../src"
#Использовать asserts

Перем ЮнитТест;
Перем ТокенАвторизации;
Перем МассивВременныхФайлов;
Перем РаботаетПоискФайлов;

Функция ПолучитьСписокТестов(Знач Тестирование) Экспорт
	
	ЮнитТест = Тестирование;	
	
	ИменаТестов = Новый Массив;
	ИменаТестов.Добавить("ТестДолжен_ПроверитьОтправкуФайлаБезСессии");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьОтправкуФайлаЧерезСессию");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьУдалениеФайла");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьПолучениеИнформацииОФайле");
	ИменаТестов.Добавить("ТестДолжен_ЗагрузитьФайлИзСервиса");
	ИменаТестов.Добавить("ТестДолжен_ПроверитьСписокФайлов");
	
	Возврат ИменаТестов;
	
КонецФункции // ПолучитьСписокТестов()

Процедура ПередЗапускомТеста() Экспорт
	
	// токен апи из файла, если нет нужно создать.
	ИмяФайла = ОбъединитьПути(ТекущийСценарий().Каталог, "..", "features", "token.txt");
	ТД = Новый ТекстовыйДокумент();
	ТД.Прочитать(ИмяФайла);
	ТокенАвторизации = ТД.ПолучитьТекст();
	ТД = Неопределено;
	
	МассивВременныхФайлов = Новый Массив;

	РаботаетПоискФайлов = Ложь;
	
КонецПроцедуры // ПередЗапускомТеста()

Процедура ПослеЗапускаТеста() Экспорт
	
	УдалитьВременныеФайлы();
	Если РаботаетПоискФайлов Тогда
		УдалитьВременныеФайлыНаСервисе();
	КонецЕсли;
	
КонецПроцедуры // ПослеЗапускаТеста()

Процедура ТестДолжен_ПроверитьОтправкуФайлаБезСессии() Экспорт
	
	ИмяТеста = "ТестДолжен_ПроверитьОтправкуФайлаБезСессии";
	ИмяВременногоФайла = ВременныйФайл(ИмяТеста);
	ИмяФайлаНаСервисе = "/" + ИмяТеста + "2.txt";
	
	Клиент = Новый Dropbox();
	Клиент.УстановитьТокенАвторизации(ТокенАвторизации);
	ОбъектDB = Клиент.ОтправитьФайл(ИмяВременногоФайла, ИмяФайлаНаСервисе);
	
	Утверждения.Проверить(ОбъектDB <> Неопределено И ОбъектDB.Идентификатор <> Неопределено, "Не удалось отправить файл в dropbox без сессии (объект dropbox)");
	
	ОбъектDB = Новый ОбъектDropbox();
	ОбъектDB.Путь = ИмяВременногоФайла;
	ОбъектDB = Клиент.ОтправитьФайл(ОбъектDB, ИмяФайлаНаСервисе);
	
	Утверждения.Проверить(ОбъектDB <> Неопределено И ОбъектDB.Идентификатор <> Неопределено, "Не удалось отправить файл в dropbox без сессии (путь к файлу)");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьОтправкуФайлаЧерезСессию() Экспорт
	
	ИмяТеста = "ТестДолжен_ПроверитьОтправкуФайлаЧерезСессию";
	ИмяВременногоФайла = ВременныйФайл(ИмяТеста);
	ИмяФайлаНаСервисе = "/" + ИмяТеста + "2.txt";
	
	Клиент = Новый Dropbox();
	Клиент.УстановитьТокенАвторизации(ТокенАвторизации);
	ОбъектDB = Клиент.ОтправитьФайл(
		ИмяВременногоФайла, 
		ИмяФайлаНаСервисе,
		Истина); // через сессию
	
	Утверждения.Проверить(ОбъектDB.Идентификатор <> Неопределено, "Не удалось отправить файл в dropbox через сессию (объект dropbox)");
	
	ОбъектDB = Новый ОбъектDropbox();
	ОбъектDB.Путь = ИмяВременногоФайла; 
	ОбъектDB = Клиент.ОтправитьФайл(
		ОбъектDB, 
		ИмяФайлаНаСервисе,
		Истина); // через сессию
	
	Утверждения.Проверить(ОбъектDB.Идентификатор <> Неопределено, "Не удалось отправить файл в dropbox через сессию (путь к файлу)");
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение	
	КонецПопытки;
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьУдалениеФайла() Экспорт
	
	ИмяТеста = "ТестДолжен_ПроверитьУдалениеФайла";
	ИмяВременногоФайла = ВременныйФайл(ИмяТеста);
	ИмяФайла = СтрШаблон("ТестДолжен_ПроверитьУдалениеФайла%1.txt", Формат(ТекущаяДата(), "ДФ=ddMMyyyhhmmss"));
	
	Клиент = Новый Dropbox();
	Клиент.УстановитьТокенАвторизации(ТокенАвторизации);
	
	ОбъектDB = Клиент.ОтправитьФайл(
	ИмяВременногоФайла, 
	"/" + ИмяФайла);
	
	Результат = Клиент.УдалитьФайл(ОбъектDB);
	
	Утверждения.Проверить(Результат, "Не удалось удалить файл в dropbox (объект dropbox)");
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = СтрШаблон(ИмяТеста + "%1.txt", Формат(ТекущаяДата(), "ДФ=ddMMyyyhhmmss"));
	ИмяФайлаНаСервисе = "/" + ИмяФайла;
	ОбъектDB = Клиент.ОтправитьФайл(
	ИмяВременногоФайла, 
	ИмяФайлаНаСервисе);
	
	Результат = Клиент.УдалитьФайл(ИмяФайлаНаСервисе);
	Утверждения.Проверить(Результат, "Не удалось удалить файл в dropbox (через строку путь)");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеИнформацииОФайле() Экспорт
	
	ИмяТеста = "ТестДолжен_ПроверитьПолучениеИнформацииОФайле";
	ИмяВременногоФайла = ВременныйФайл(ИмяТеста);
	ИмяФайла = СтрШаблон(ИмяТеста + "%1.txt", Формат(ТекущаяДата(), "ДФ=ddMMyyyhhmmss"));
	
	Клиент = Новый Dropbox();
	Клиент.УстановитьТокенАвторизации(ТокенАвторизации);
	
	ИмяФайлаНаСервисе = "/" + ИмяФайла;
	
	Клиент.ОтправитьФайл(
	ИмяВременногоФайла, 
	ИмяФайлаНаСервисе);
	
	
	ОбъектDB = Клиент.ОбъектDropbox(ИмяФайлаНаСервисе);
	ЭтоОбъектDB = ОбъектDB <> Неопределено;
	Утверждения.Проверить(ЭтоОбъектDB, "Не удалось получить информацию о файле в dropbox");
	
	Если ЭтоОбъектDB Тогда
		
		Утверждения.Проверить(Не ПустаяСтрока(ОбъектDB.Идентификатор), "Не удалось получить информацию о файле в dropbox");	
		
		Клиент.УдалитьФайл(ОбъектDB);
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ТестДолжен_ЗагрузитьФайлИзСервиса() Экспорт
	
	ИмяТеста = "ТестДолжен_ПроверитьПолучениеИнформацииОФайле";
	Содержимое = "ЗагрузкаФайла";
	ИмяВременногоФайла = ВременныйФайл(ИмяТеста, Содержимое);
	ИмяФайла = СтрШаблон(ИмяТеста + "%1.txt", Формат(ТекущаяДата(), "ДФ=ddMMyyyhhmmss"));
	
	Клиент = Новый Dropbox();
	Клиент.УстановитьТокенАвторизации(ТокенАвторизации);
	ИмяФайлаНаСервисе = "/" + ИмяФайла;
	Клиент.ОтправитьФайл(
		ИмяВременногоФайла, 
		ИмяФайлаНаСервисе);
	
	ИмяФайлПроверки = ПолучитьИмяВременногоФайла("txt");
	РезультатЗагрузки = Клиент.ЗагрузитьФайл(ИмяФайлаНаСервисе, ИмяФайлПроверки);
	
	Утверждения.Проверить(РезультатЗагрузки, "Не удалось загрузить файл на сервис. Действие выполнено неудачно");
	
	Если РезультатЗагрузки Тогда

		Клиент.УдалитьФайл(ИмяФайлаНаСервисе);

		Файл = Новый Файл(ИмяФайлПроверки);
		ФайлСуществует = Файл.Существует();
		Утверждения.Проверить(ФайлСуществует, "Не найден загруженный файл с сервиса");
		
		Если ФайлСуществует Тогда

			СодержимоеФайла = СодержимоеВременногоФайла(ИмяФайлПроверки);
			// Как то не красиво! Видимо проблема в символах
			Утверждения.Проверить(СтрНайти(СодержимоеФайла, Содержимое) > 0, "Содержание загруженного файла отличается от начального файла");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьСписокФайлов() Экспорт

	// зальем файл filetest.txt и получим его в списке

	ИмяТеста = "ТестДолжен_ПроверитьСписокФайлов";
	Содержимое = "СписокФайлов";
	ИмяВременногоФайла = ВременныйФайл(ИмяТеста, Содержимое);
	ИмяФайла = СтрШаблон(ИмяТеста + "%1.txt", Формат(ТекущаяДата(), "ДФ=ddMMyyyhhmmss"));

	Клиент = Новый Dropbox();
	Клиент.УстановитьТокенАвторизации(ТокенАвторизации);
	ИмяФайлаНаСервисе = "/" + "testfile.txt";
	Клиент.ОтправитьФайл(
		ИмяВременногоФайла, 
		ИмяФайлаНаСервисе);

	РезультатПоиска = Клиент.ПоискФайлов("testfile.txt", "filename", "");
	Сообщить("Тип файла: " + Тип(РезультатПоиска));
	ЭтоЗначениеНеопределено = РезультатПоиска = Неопределено;
	Утверждения.Проверить(Не ЭтоЗначениеНеопределено, "Не получен список файлов с сервиса dropbox");

	Если Не ЭтоЗначениеНеопределено Тогда

		КоличествоФайлов = РезультатПоиска.Количество() ;
		Утверждения.Проверить(КоличествоФайлов > 0, "Тестовый файл не найден на сервисе dropbox");	

		Если КоличествоФайлов > 0 Тогда

			ОбъектDB = РезультатПоиска[0];
			ФайлУдален = Клиент.УдалитьФайл(ОбъектDB);	

			РаботаетПоискФайлов = Истина;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ТестДолжен_ПроверитьСписокФайлов()

Функция ВременныйФайл(ИмяТеста, Содержимое = "")
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	Если Не ЗначениеЗаполнено(Содержимое) Тогда
		ТекстовыйДокумент.УстановитьТекст(ИмяТеста + ТекущаяДата());
	Иначе
		ТекстовыйДокумент.УстановитьТекст(Содержимое);	
	КонецЕсли;
	ТекстовыйДокумент.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8);
	
	МассивВременныхФайлов.Добавить(ИмяВременногоФайла);
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

Функция СодержимоеВременногоФайла(ИмяФайла)
	
	ТД = Новый ТекстовыйДокумент();
	ТД.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	Текст = ТД.ПолучитьТекст();
	ТД = Неопределено;
	Возврат Текст;
	
КонецФункции

Процедура УдалитьВременныеФайлы()
	
	Для Каждого ИмяФайла Из МассивВременныхФайлов Цикл
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
		КонецПопытки;	
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьВременныеФайлыНаСервисе()

	Клиент = Новый Dropbox();
	Клиент.УстановитьТокенАвторизации(ТокенАвторизации);
	РезультатПоиска = Клиент.ПоискФайлов("*.txt", "filename", "");
	Если ТипЗнч(РезультатПоиска) = Тип("Массив") Тогда

		Для Каждого ОбъектDB Из РезультатПоиска Цикл

			Клиент.УдалитьФайл(ОбъектDB);

		КонецЦикла;

	КонецЕсли;


КонецПроцедуры